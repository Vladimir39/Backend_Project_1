generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  email           String    @unique
  password        String
  phone           String    @unique
  name            String    @unique
  avatarPath      String    @default("/uploads/default-avatar.png") @map("avatar_path")
  isPhoneVerified Boolean   @default(false)
  twoFA           Boolean   @default(false)
  cart            Cart?
  order           Order[]
  otp             Otp[]
  favorites       Product[]
}

model Otp {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int
  code      String
  expiresAt DateTime @db.Timestamp(5)
  useCase   UseCase
  user      User     @relation(fields: [userId], references: [id])
}

model Product {
  id           Int                   @id @default(autoincrement())
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  name         String                @unique
  slug         String                @unique
  images       String
  description  String
  price        Int
  categoryId   Int?                  @map("category_id")
  popular      Boolean               @default(false)
  userId       Int?                  @map("user_id")
  countPopular Int                   @default(0)
  items        CartItem[]
  category     Category?             @relation(fields: [categoryId], references: [id])
  user         User?                 @relation(fields: [userId], references: [id])
  restaurants  RestaurantOnProduct[]
  ingredients  Ingredient[]          @relation("IngredientToProduct")
}

model Restaurant {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")
  name      String                @unique
  address   String
  products  RestaurantOnProduct[]
}

model RestaurantOnProduct {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  productId    Int
  restaurantId Int
  product      Product    @relation(fields: [productId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([productId, restaurantId])
}

model Ingredient {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  name      String
  price     Int
  imageUrl  String
  cartItem  CartItem[] @relation("CartItemToIngredient")
  products  Product[]  @relation("IngredientToProduct")
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  slug      String    @unique
  products  Product[]
  
}

model Cart {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  token       String
  totalAmount Int        @default(0)
  userId      Int?       @unique
  user        User?      @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  quantity    Int          @default(1)
  cartId      Int
  productId   Int          @map("product_id")
  cart        Cart         @relation(fields: [cartId], references: [id])
  product     Product      @relation(fields: [productId], references: [id])
  ingredients Ingredient[] @relation("CartItemToIngredient")
}

model Order {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  address      String
  code         String
  flat         String?
  entrance     String?
  floor        String?
  comment      String?
  fullName     String
  items        Json
  phone        String
  token        String
  totalAmount  Int
  userId       Int?
  status       OrderStatus
  timeDelivery String
  delivery     String
  user         User?       @relation(fields: [userId], references: [id])
}

model Stories {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  name        String
  images      String
  storiesItem StoriesItem[]
}

model StoriesItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String
  images      String
  storiesId   Int?     @map("stories_id")
  stories     Stories? @relation(fields: [storiesId], references: [id])
}

enum UseCase {
  LOGIN
  D2FA
  PHV
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}
